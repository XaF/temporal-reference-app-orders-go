# See https://www.gitpod.io/docs/configure/workspaces/workspace-image
#image:
#  file: .devcontainer/Dockerfile.gitpod
# See https://www.gitpod.io/docs/configure/workspaces/ports
ports:
- name: temporal-web-ui
  description: The Web UI of Temporal
  port: 8080
  onOpen: ignore  # do not notify once the port is detected
- name: temporal-grpc
  description: The gRPC API of Temporal
  port: 7233
  onOpen: ignore  # do not notify once the port is detected
- name: temporal-http
  description: The HTTP API of Temporal
  port: 7243
  onOpen: ignore  # do not notify once the port is detected
- name: temporal-metrics
  description: The Prometheus endpoint to read Temporal metrics
  port: 9090
  onOpen: ignore  # do not notify once the port is detected
- name: oms-web
  description: The Web UI of the Order Management System
  port: 5173
  onOpen: ignore  # do not notify once the port is detected
- name: oms-billing-api
  description: The Billing API of the Order Management System
  port: 10001
  onOpen: ignore  # do not notify once the port is detected
- name: oms-order-api
  description: The Order API of the Order Management System
  port: 10002
  onOpen: ignore  # do not notify once the port is detected
- name: oms-shipment-api
  description: The Shipment API of the Order Management System
  port: 10003
  onOpen: ignore  # do not notify once the port is detected
- name: oms-fraud-api
  description: The Fraud API of the Order Management System
  port: 10004
  onOpen: ignore  # do not notify once the port is detected
tasks:
- name: Temporal Server
  env:
    TEMPORAL_CLI_VERSION: 1.0.0
    TEMPORAL_UI_PORT: 8080
  init: |
    # Prepare the variables used to download the Temporal CLI
    PLATFORM=linux
    ARCHITECTURE=$(uname -m)
    # Validate the architecture and set it to the supported values
    case $ARCHITECTURE in \
        x86_64 | amd64) ARCHITECTURE=amd64 ;; \
        aarch64 | arm64) ARCHITECTURE=arm64 ;; \
        *) echo "Unsupported architecture: $ARCHITECTURE" && exit 1 ;; \
    esac
    # Download and install the Temporal CLI
    curl -L "https://github.com/temporalio/cli/releases/download/v${TEMPORAL_CLI_VERSION}/temporal_cli_${TEMPORAL_CLI_VERSION}_${PLATFORM}_${ARCHITECTURE}.tar.gz" | \
      sudo tar -xz -C /usr/local/bin && \
      sudo chmod +x /usr/local/bin/temporal
    # Make sure the logs directory exists
    mkdir -p /tmp/logs
  command: |
    # Trigger start of temporal server, and send it to the background
    temporal server start-dev \
      --metrics-port 9090 \
      --ip 0.0.0.0 \
      --port 7233 \
      --http-port 7243 \
      --ui-port "$TEMPORAL_UI_PORT" \
      --db-filename temporal-persistence.db \
      | tee "/tmp/logs/temporal-server.log" \
      &
    # Wait for the web UI port to be open and open the preview
    gp ports await "$TEMPORAL_UI_PORT"
    # Set the temporal-server as ready
    gp sync-done temporal-server
    # Wait for the go to open stuff
    gp sync-await all-systems-go
    # Open the UI
    # gp preview "$(gp url $TEMPORAL_UI_PORT)"
    # Now wait on the temporal server process
    wait
  openMode: split-left
- name: OMS Frontend
  env:
    BILLING_API_PORT: 10001
    ORDER_API_PORT: 10002
    SHIPMENT_API_PORT: 10003
    FRAUD_API_PORT: 10004
    BILLING_API_URL: http://localhost:10001
    ORDER_API_URL: http://localhost:10002
    SHIPMENT_API_URL: http://localhost:10003
    FRAUD_API_URL: http://localhost:10004
  init: |
    set -eo pipefail
    # Clone the web application repository
    git clone --depth 1 https://github.com/temporalio/reference-app-orders-web.git /tmp/oms-web
    # Install the web application dependencies
    pnpm install --prefix /tmp/oms-web
    # Make sure the logs directory exists
    mkdir -p /tmp/logs
  command: |
    # Trigger start of the oms web server, and send it to the background
    (cd /tmp/oms-web && pnpm dev) | \
      tee "/tmp/logs/oms-web.log" \
      &
    # Wait for the web UI port to be open and open the preview
    gp ports await 5173 && \
      gp ports await "$BILLING_API_PORT" && \
      gp ports await "$ORDER_API_PORT" && \
      gp ports await "$SHIPMENT_API_PORT" && \
      gp ports await "$FRAUD_API_PORT"
    # Set oms as ready
    gp sync-done oms
    # Wait for the go to open stuff
    gp sync-await all-systems-go
    # Open the UI, we do that externally because we can't open two
    # UIs; but ideally we would replace that by a VSCode extension
    # with nice buttons to switch between the two UIs
    gp preview "$(gp url 5173)" --external
    # Now wait on the oms web server process
    wait
  openMode: tab-after
- name: OMS Backend
  env:
    BILLING_API_PORT: 10001
    ORDER_API_PORT: 10002
    SHIPMENT_API_PORT: 10003
    FRAUD_API_PORT: 10004
    BILLING_API_URL: http://localhost:10001
    ORDER_API_URL: http://localhost:10002
    SHIPMENT_API_URL: http://localhost:10003
    FRAUD_API_URL: http://localhost:10004
  init: |
    # Install modd to keep track of go file changes
    go install github.com/cortesi/modd/cmd/modd@latest
    # Build the binary
    go build ./cmd/oms
    # Make sure the logs directory exists
    mkdir -p /tmp/logs
    # Create the modd.conf file
    cat <<EOF > /tmp/oms-modd.conf
    **/*.go !**/*_test.go {
      prep: go build ./cmd/oms
      daemon +sigterm: ./oms worker | tee -a /tmp/logs/oms-worker.log
    }
    **/*.go !**/*_test.go {
      prep: go build ./cmd/oms
      daemon +sigterm: ./oms api | tee -a /tmp/logs/oms-api.log
    }
    EOF
  command: modd -f /tmp/oms-modd.conf
  openMode: tab-after
- name: Terminal
  init: |
    # Open a loading URL for now
    # TODO: replace by a page that shows "Loading Temporal Sandbox" with the loading Temporal logo
    gp preview https://cdn.svgator.com/images/2023/06/geometric-shapes-preloaders.svg
    # Wait for all resources to be ready
    gp sync-await oms
    gp sync-await temporal-server
    # Open the readme file so the user can see the instructions
    gp open README.md
    # We are ready to go
    gp sync-done all-systems-go
    # Print a welcome message
    clear
    echo "Welcome to the sandbox!"
  openMode: split-right
